{"version":3,"file":"avalanche-js-staking.cjs.production.min.js","sources":["../src/stakingTransaction.ts","../src/factory.ts"],"sourcesContent":["/**\n * # avalanche-js-staking\n\nThis package provides a collection of apis to create, sign/send staking transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install avalanche-js-staking\n```\n\n## Usage\n\nCreate a Avalanche instance connecting to testnet\n\n```javascript\n* const { Avalanche } = require('avalanche-js-core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('avalanche-js-utils');\n\n* const hmy = new Avalanche(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Avalanche,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\nBelow, examples show how to send delegate, undelegate, and collect rewards staking transactions. First, set the chainId, gasLimit, gasPrice for all subsequent staking transactions\n```javascript\n* hmy.stakings.setTxParams({\n*   gasLimit: 25000,\n*   gasPrice: numberToHex(new hmy.utils.Unit('1').asGwei().toWei()),\n*   chainId: 2\n* });\n```\n<span style=\"color:red\">Note: create and edit validator transactions are not fully supported in the sdk</span>\n\nCreate delegate staking transaction\n```javascript\n* const delegate = hmy.stakings.delegate({\n*   delegatorAddress: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'avax1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asAVAX().toWei())\n* });\n* const delegateStakingTx = delegate.build();\n```\n\nSign and send the delegate transaction and receive confirmation\n```javascript\n* // key corresponds to avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signStaking(delegateStakingTx).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log(hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nSimilarily, undelegate and collect reward transactions can be composed, signed and sent\nCreate undelegate staking transaction\n```javascript\n* const undelegate = hmy.stakings.undelegate({\n*   delegatorAddress: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'avax1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asAVAX().toWei())\n* });\n* const undelegateStakingTx = undelegate.build();\n```\n\nCreate collect rewards staking transaction\n```javascript\n* const collectRewards = hmy.stakings.collectRewards({\n*   delegatorAddress: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n* });\n* const collectRewardsStakingTx = collectRewards.build();\n```\n\nAlso, similar to normal transaction, signing and sending can be performed asynchronously.\n * @packageDocumentation\n * @module avalanche-staking\n */\n\n// tslint:disable: max-classes-per-file\n\nimport {\n  arrayify,\n  BN,\n  encode,\n  hexlify,\n  keccak256,\n  sign,\n  Signature,\n  splitSignature,\n  stripZeros,\n} from 'avalanche-js-crypto';\nimport { Messenger, RPCMethod } from 'avalanche-js-network';\nimport { defaultMessenger, TransactionBase, TxStatus } from 'avalanche-js-transaction';\nimport { numberToHex, Unit } from 'avalanche-js-utils';\nimport { TextEncoder } from 'text-encoding';\n\n/** @hidden */\nexport class StakingSettings {\n  public static PRECISION = 18;\n  public static MAX_DECIMAL = 1000000000000000000;\n}\n\n/** @hidden */\nexport enum Directive {\n  DirectiveCreateValidator,\n  DirectiveEditValidator,\n  DirectiveDelegate,\n  DirectiveUndelegate,\n  DirectiveCollectRewards,\n}\n\nexport class StakingTransaction extends TransactionBase {\n  private directive: Directive;\n  private stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards;\n  private nonce: number | string;\n  private gasLimit: number | string;\n  private gasPrice: number | string;\n  private chainId: number;\n  private rawTransaction: string;\n  private unsignedRawTransaction: string;\n  private signature: Signature;\n  private from: string;\n\n  constructor(\n    directive: Directive,\n    stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards,\n    nonce: number | string,\n    gasPrice: number | string,\n    gasLimit: number | string,\n    chainID: number,\n    messenger: Messenger = defaultMessenger,\n    txStatus = TxStatus.INTIALIZED,\n  ) {\n    super(messenger, txStatus);\n\n    this.directive = directive;\n    this.stakeMsg = stakeMsg;\n    this.nonce = nonce;\n    this.gasLimit = gasLimit;\n    this.gasPrice = gasPrice;\n    this.rawTransaction = '0x';\n    this.unsignedRawTransaction = '0x';\n    this.signature = {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    };\n    this.chainId = chainID;\n    this.from = '0x';\n  }\n\n  encode(): [string, any[]] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    // TODO: temporary hack for converting 0x00 to 0x\n    if (!this.directive) {\n      raw.push('0x');\n    } else {\n      raw.push(hexlify(this.directive));\n    }\n    raw.push(this.stakeMsg.encode());\n    if (!this.nonce) {\n      raw.push('0x');\n    } else {\n      raw.push(hexlify(this.nonce));\n    }\n    raw.push(hexlify(this.gasPrice));\n    raw.push(hexlify(this.gasLimit));\n    if (this.chainId != null && this.chainId !== 0) {\n      raw.push(hexlify(this.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n    return [encode(raw), raw];\n  }\n\n  rlpSign(prv: string): [Signature, string] {\n    const [unsignedRawTransaction, raw] = this.encode();\n    this.setUnsigned(unsignedRawTransaction);\n    const signature = sign(keccak256(unsignedRawTransaction), prv);\n    const signed = this.getRLPSigned(raw, signature);\n    return [signature, signed];\n  }\n\n  getRLPSigned(raw: any[], signature: Signature): string {\n    const sig = splitSignature(signature);\n    let v = 27 + (sig.recoveryParam || 0);\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += this.chainId * 2 + 8;\n\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r) || []));\n    raw.push(stripZeros(arrayify(sig.s) || []));\n\n    return encode(raw);\n  }\n\n  public async sendTransaction(): Promise<[StakingTransaction, string]> {\n    if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n      throw new Error('Transaction not signed');\n    }\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n\n    const res = await this.messenger.send(\n      RPCMethod.SendRawStakingTransaction,\n      this.rawTransaction,\n      this.messenger.chainType,\n      this.messenger.currentShard,\n      // 0, // Staking tx always sent to shard 0\n    );\n\n    if (res.isResult()) {\n      this.id = res.result;\n      this.emitTransactionHash(this.id);\n      this.setTxStatus(TxStatus.PENDING);\n      return [this, res.result];\n    } else if (res.isError()) {\n      this.emitConfirm(`transaction failed:${res.error.message}`);\n      this.setTxStatus(TxStatus.REJECTED);\n      return [this, `transaction failed:${res.error.message}`];\n    } else {\n      this.emitError('transaction failed');\n      throw new Error('transaction failed');\n    }\n  }\n\n  setUnsigned(unSigned: string) {\n    this.unsignedRawTransaction = unSigned;\n  }\n  setRawTransaction(rawTransaction: string) {\n    this.rawTransaction = rawTransaction;\n  }\n  setSignature(signature: Signature) {\n    this.signature = {\n      r: signature.r,\n      s: signature.s,\n      v: signature.v,\n      recoveryParam: signature.recoveryParam,\n    };\n  }\n  setNonce(nonce: number) {\n    this.nonce = nonce;\n  }\n  setFromAddress(address: string) {\n    this.from = address;\n  }\n  getUnsignedRawTransaction() {\n    return this.unsignedRawTransaction;\n  }\n  getRawTransaction() {\n    return this.rawTransaction;\n  }\n  getSignature() {\n    return this.signature;\n  }\n\n  getFromAddress() {\n    return this.from;\n  }\n  async confirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    shardID: number | string = this.messenger.currentShard,\n    toShardID: number | string = 0,\n  ) {\n    const txConfirmed = await this.txConfirm(txHash, maxAttempts, interval, shardID);\n    if (shardID === toShardID) {\n      return txConfirmed;\n    }\n    if (txConfirmed.isConfirmed()) {\n      const cxConfirmed = await this.cxConfirm(txHash, maxAttempts, interval, toShardID);\n      return cxConfirmed;\n    } else {\n      return txConfirmed;\n    }\n  }\n}\n\n/** @hidden */\nexport class Description {\n  name: string;\n  identity: string;\n  website: string;\n  securityContact: string;\n  details: string;\n\n  constructor(\n    name: string,\n    identity: string,\n    website: string,\n    securityContact: string,\n    details: string,\n  ) {\n    this.name = name;\n    this.identity = identity;\n    this.website = website;\n    this.securityContact = securityContact;\n    this.details = details;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    const enc = new TextEncoder();\n    raw.push(enc.encode(this.name));\n    raw.push(enc.encode(this.identity));\n    raw.push(enc.encode(this.website));\n    raw.push(enc.encode(this.securityContact));\n    raw.push(enc.encode(this.details));\n    return raw;\n  }\n}\n\n/** @hidden */\nexport class Decimal {\n  value: BN;\n\n  constructor(value: string) {\n    if (value.length === 0) {\n      throw new Error(`decimal string is empty`);\n    }\n    let value1 = value;\n    if (value[0] === '-') {\n      throw new Error(`decimal fraction should be be between [0, 1]`);\n    }\n    if (value[0] === '+') {\n      value1 = value.substr(1);\n    }\n    if (value1.length === 0) {\n      throw new Error(`decimal string is empty`);\n    }\n    const spaced = value1.split(' ');\n    if (spaced.length > 1) {\n      throw new Error(`bad decimal string`);\n    }\n    const splitted = value1.split('.');\n    let len = 0;\n    let combinedStr = splitted[0];\n    if (splitted.length === 2) {\n      len = splitted[1].length;\n      if (len === 0 || combinedStr.length === 0) {\n        throw new Error(`bad decimal length`);\n      }\n      if (splitted[1][0] === '-') {\n        throw new Error(`bad decimal string`);\n      }\n      combinedStr += splitted[1];\n    } else if (splitted.length > 2) {\n      throw new Error(`too many periods to be a decimal string`);\n    }\n    if (len > StakingSettings.PRECISION) {\n      throw new Error(\n        `too much precision: precision should be less than ${StakingSettings.PRECISION}`,\n      );\n    }\n    const zerosToAdd = StakingSettings.PRECISION - len;\n    combinedStr += '0'.repeat(zerosToAdd);\n    combinedStr = combinedStr.replace(/^0+/, '');\n    const val = new Unit(combinedStr).asWei().toWei();\n    if (val.gt(new Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {\n      throw new Error(`too large decimal fraction`);\n    }\n    this.value = val;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(numberToHex(this.value));\n    return raw;\n  }\n}\n\n/** @hidden */\nexport class CommissionRate {\n  rate: Decimal;\n  maxRate: Decimal;\n  maxChangeRate: Decimal;\n  constructor(rate: Decimal, maxRate: Decimal, maxChangeRate: Decimal) {\n    this.rate = rate;\n    this.maxRate = maxRate;\n    this.maxChangeRate = maxChangeRate;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(this.rate.encode());\n    raw.push(this.maxRate.encode());\n    raw.push(this.maxChangeRate.encode());\n    return raw;\n  }\n}\n\nexport class CreateValidator {\n  validatorAddress: string;\n  description: Description;\n  commissionRates: CommissionRate;\n  minSelfDelegation: number;\n  maxTotalDelegation: number;\n  slotPubKeys: string[];\n  amount: number;\n  constructor(\n    validatorAddress: string,\n    description: Description,\n    commissionRates: CommissionRate,\n    minSelfDelegation: number,\n    maxTotalDelegation: number,\n    slotPubKeys: string[],\n    amount: number,\n  ) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRates = commissionRates;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotPubKeys = slotPubKeys;\n    this.amount = amount;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRates.encode());\n    raw.push(hexlify(this.minSelfDelegation));\n    raw.push(hexlify(this.maxTotalDelegation));\n    raw.push(this.encodeArr());\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n\n  encodeArr(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    this.slotPubKeys.forEach((pubKey) => {\n      raw.push(pubKey);\n    });\n    return raw;\n  }\n}\n\nexport class EditValidator {\n  validatorAddress: string;\n  description: Description;\n  commissionRate: Decimal;\n  minSelfDelegation: number;\n  maxTotalDelegation: number;\n  slotKeyToRemove: string;\n  slotKeyToAdd: string;\n  constructor(\n    validatorAddress: string,\n    description: Description,\n    commissionRate: Decimal,\n    minSelfDelegation: number,\n    maxTotalDelegation: number,\n    slotKeyToRemove: string,\n    slotKeyToAdd: string,\n  ) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRate = commissionRate;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotKeyToRemove = slotKeyToRemove;\n    this.slotKeyToAdd = slotKeyToAdd;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRate.encode());\n    raw.push(hexlify(this.minSelfDelegation));\n    raw.push(hexlify(this.maxTotalDelegation));\n    raw.push(this.slotKeyToRemove);\n    raw.push(this.slotKeyToAdd);\n    return raw;\n  }\n}\n\nexport class Delegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount: number;\n  constructor(delegatorAddress: string, validatorAddress: string, amount: number) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n}\n\nexport class Undelegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount: number;\n  constructor(delegatorAddress: string, validatorAddress: string, amount: number) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n}\n\nexport class CollectRewards {\n  delegatorAddress: string;\n  constructor(delegatorAddress: string) {\n    this.delegatorAddress = delegatorAddress;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    return raw;\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-staking\n */\n\nimport { Messenger } from 'avalanche-js-network';\nimport { Signature } from 'avalanche-js-crypto';\n\nimport {\n  Directive,\n  CreateValidator,\n  EditValidator,\n  Delegate,\n  Undelegate,\n  CollectRewards,\n  Description,\n  CommissionRate,\n  Decimal,\n  StakingTransaction,\n} from './stakingTransaction';\nimport { Unit } from 'avalanche-js-utils';\nimport { TxStatus } from 'avalanche-js-transaction';\n\n/** @hidden */\nexport interface DescriptionInterface {\n  name: string;\n  identity: string;\n  website: string;\n  securityContact: string;\n  details: string;\n}\n\n/** @hidden */\nexport interface CommissionRateInterface {\n  rate: string;\n  maxRate: string;\n  maxChangeRate: string;\n}\n\nexport class StakingFactory {\n  public messenger: Messenger;\n  public stakeMsg?: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards;\n  public directive?: Directive;\n  public nonce: number | string;\n  public gasPrice: number | string;\n  public gasLimit: number | string;\n  public chainId: number;\n  public signature: Signature;\n  constructor(messenger: Messenger) {\n    this.messenger = messenger;\n    this.nonce = 0;\n    this.gasPrice = new Unit('100').asGwei().toHex();\n    this.gasLimit = new Unit('210000').asWei().toHex();\n    this.chainId = 1;\n    this.signature = {\n      v: 0,\n      r: '',\n      s: '',\n    };\n  }\n\n  createValidator({\n    validatorAddress,\n    description,\n    commissionRate,\n    minSelfDelegation,\n    maxTotalDelegation,\n    slotPubKeys,\n    amount,\n  }: {\n    validatorAddress: string;\n    description: DescriptionInterface;\n    commissionRate: CommissionRateInterface;\n    minSelfDelegation: number;\n    maxTotalDelegation: number;\n    slotPubKeys: string[];\n    amount: number;\n  }) {\n    this.stakeMsg = new CreateValidator(\n      validatorAddress,\n      new Description(\n        description.name,\n        description.identity,\n        description.website,\n        description.securityContact,\n        description.details,\n      ),\n      new CommissionRate(\n        new Decimal(commissionRate.rate),\n        new Decimal(commissionRate.maxRate),\n        new Decimal(commissionRate.maxChangeRate),\n      ),\n      minSelfDelegation,\n      maxTotalDelegation,\n      slotPubKeys,\n      amount,\n    );\n    this.directive = Directive.DirectiveCreateValidator;\n    return this;\n  }\n\n  editValidator({\n    validatorAddress,\n    description,\n    commissionRate,\n    minSelfDelegation,\n    maxTotalDelegation,\n    slotKeyToRemove,\n    slotKeyToAdd,\n  }: {\n    validatorAddress: string;\n    description: DescriptionInterface;\n    commissionRate: string;\n    minSelfDelegation: number;\n    maxTotalDelegation: number;\n    slotKeyToRemove: string;\n    slotKeyToAdd: string;\n  }) {\n    this.stakeMsg = new EditValidator(\n      validatorAddress,\n      new Description(\n        description.name,\n        description.identity,\n        description.website,\n        description.securityContact,\n        description.details,\n      ),\n      new Decimal(commissionRate),\n      minSelfDelegation,\n      maxTotalDelegation,\n      slotKeyToRemove,\n      slotKeyToAdd,\n    );\n    this.directive = Directive.DirectiveEditValidator;\n    return this;\n  }\n\n  delegate({\n    delegatorAddress,\n    validatorAddress,\n    amount,\n  }: {\n    delegatorAddress: string;\n    validatorAddress: string;\n    amount: number;\n  }) {\n    this.stakeMsg = new Delegate(delegatorAddress, validatorAddress, amount);\n    this.directive = Directive.DirectiveDelegate;\n    return this;\n  }\n\n  undelegate({\n    delegatorAddress,\n    validatorAddress,\n    amount,\n  }: {\n    delegatorAddress: string;\n    validatorAddress: string;\n    amount: number;\n  }) {\n    this.stakeMsg = new Undelegate(delegatorAddress, validatorAddress, amount);\n    this.directive = Directive.DirectiveUndelegate;\n    return this;\n  }\n\n  collectRewards({ delegatorAddress }: { delegatorAddress: string }) {\n    this.stakeMsg = new CollectRewards(delegatorAddress);\n    this.directive = Directive.DirectiveCollectRewards;\n    return this;\n  }\n\n  setTxParams({\n    nonce,\n    gasPrice,\n    gasLimit,\n    chainId,\n    signature,\n  }: {\n    nonce: number | string;\n    gasPrice: number | string;\n    gasLimit: number | string;\n    chainId: number;\n    signature: Signature;\n  }) {\n    this.nonce = nonce;\n    this.gasPrice = gasPrice;\n    this.gasLimit = gasLimit;\n    this.chainId = chainId;\n    this.signature = signature;\n    return this;\n  }\n\n  build() {\n    if (this.directive === undefined) {\n      throw new Error('cannot build stakingTransaction without Directive');\n    }\n    if (this.stakeMsg === undefined) {\n      throw new Error('cannot build stakingTransaction without stakeMsg');\n    }\n\n    return new StakingTransaction(\n      this.directive,\n      this.stakeMsg,\n      this.nonce !== undefined ? this.nonce : 0,\n      this.gasPrice !== undefined ? this.gasPrice : new Unit('100').asGwei().toHex(),\n      this.gasLimit !== undefined ? this.gasLimit : new Unit('210000').asWei().toHex(),\n      this.chainId !== undefined ? this.chainId : 1,\n      this.messenger,\n      TxStatus.INTIALIZED,\n    );\n  }\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n}\n"],"names":["Directive","StakingSettings","StakingTransaction","directive","stakeMsg","nonce","gasPrice","gasLimit","chainID","messenger","txStatus","defaultMessenger","TxStatus","INTIALIZED","rawTransaction","unsignedRawTransaction","signature","r","s","recoveryParam","v","chainId","from","encode","raw","push","this","hexlify","rlpSign","prv","setUnsigned","sign","keccak256","getRLPSigned","sig","splitSignature","pop","stripZeros","arrayify","sendTransaction","undefined","Error","send","RPCMethod","SendRawStakingTransaction","chainType","currentShard","res","isResult","id","result","emitTransactionHash","setTxStatus","PENDING","isError","emitConfirm","error","message","REJECTED","emitError","unSigned","setRawTransaction","setSignature","setNonce","setFromAddress","address","getUnsignedRawTransaction","getRawTransaction","getSignature","getFromAddress","confirm","txHash","maxAttempts","interval","shardID","toShardID","txConfirm","txConfirmed","isConfirmed","cxConfirm","TransactionBase","Description","name","identity","website","securityContact","details","enc","TextEncoder","Decimal","value","length","value1","substr","split","splitted","len","combinedStr","PRECISION","repeat","replace","val","Unit","asWei","toWei","gt","MAX_DECIMAL","toString","numberToHex","CommissionRate","rate","maxRate","maxChangeRate","CreateValidator","validatorAddress","description","commissionRates","minSelfDelegation","maxTotalDelegation","slotPubKeys","amount","normalizeAddress","encodeArr","forEach","pubKey","EditValidator","commissionRate","slotKeyToRemove","slotKeyToAdd","Delegate","delegatorAddress","Undelegate","CollectRewards","StakingFactory","asGwei","toHex","createValidator","DirectiveCreateValidator","editValidator","DirectiveEditValidator","delegate","DirectiveDelegate","undelegate","DirectiveUndelegate","collectRewards","DirectiveCollectRewards","setTxParams","build","setMessenger"],"mappings":"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"}