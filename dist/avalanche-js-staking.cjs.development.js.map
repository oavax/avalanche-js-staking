{"version":3,"file":"avalanche-js-staking.cjs.development.js","sources":["../src/stakingTransaction.ts","../src/factory.ts"],"sourcesContent":["/**\n * # avalanche-js-staking\n\nThis package provides a collection of apis to create, sign/send staking transaction, and receive confirm/receipt.\n\n## Installation\n\n```\nnpm install avalanche-js-staking\n```\n\n## Usage\n\nCreate a Avalanche instance connecting to testnet\n\n```javascript\n* const { Avalanche } = require('avalanche-js-core');\n* const {\n*   ChainID,\n*   ChainType,\n*   hexToNumber,\n*   numberToHex,\n*   fromWei,\n*   Units,\n*   Unit,\n* } = require('avalanche-js-utils');\n\n* const hmy = new Avalanche(\n*     'https://api.s0.b.hmny.io/',\n*     {\n*         chainType: ChainType.Avalanche,\n*         chainId: ChainID.HmyTestnet,\n*     },\n* );\n```\nBelow, examples show how to send delegate, undelegate, and collect rewards staking transactions. First, set the chainId, gasLimit, gasPrice for all subsequent staking transactions\n```javascript\n* hmy.stakings.setTxParams({\n*   gasLimit: 25000,\n*   gasPrice: numberToHex(new hmy.utils.Unit('1').asGwei().toWei()),\n*   chainId: 2\n* });\n```\n<span style=\"color:red\">Note: create and edit validator transactions are not fully supported in the sdk</span>\n\nCreate delegate staking transaction\n```javascript\n* const delegate = hmy.stakings.delegate({\n*   delegatorAddress: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'avax1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asAVAX().toWei())\n* });\n* const delegateStakingTx = delegate.build();\n```\n\nSign and send the delegate transaction and receive confirmation\n```javascript\n* // key corresponds to avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7, only has testnet balance\n* hmy.wallet.addByPrivateKey('45e497bd45a9049bcb649016594489ac67b9f052a6cdf5cb74ee2427a60bf25e');\n\n* hmy.wallet.signStaking(delegateStakingTx).then(signedTxn => {\n*   signedTxn.sendTransaction().then(([tx, hash]) => {\n*     console.log(hash);\n*     signedTxn.confirm(hash).then(response => {\n*       console.log(response.receipt);\n*     });\n*   });\n* });\n```\n\nSimilarily, undelegate and collect reward transactions can be composed, signed and sent\nCreate undelegate staking transaction\n```javascript\n* const undelegate = hmy.stakings.undelegate({\n*   delegatorAddress: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7',\n*   validatorAddress: 'avax1vfqqagdzz352mtvdl69v0hw953hm993n6v26yl',\n*   amount: numberToHex(new Unit(1000).asAVAX().toWei())\n* });\n* const undelegateStakingTx = undelegate.build();\n```\n\nCreate collect rewards staking transaction\n```javascript\n* const collectRewards = hmy.stakings.collectRewards({\n*   delegatorAddress: 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n* });\n* const collectRewardsStakingTx = collectRewards.build();\n```\n\nAlso, similar to normal transaction, signing and sending can be performed asynchronously.\n * @packageDocumentation\n * @module avalanche-staking\n */\n\n// tslint:disable: max-classes-per-file\n\nimport {\n  arrayify,\n  BN,\n  encode,\n  hexlify,\n  keccak256,\n  sign,\n  Signature,\n  splitSignature,\n  stripZeros,\n} from 'avalanche-js-crypto';\nimport { Messenger, RPCMethod } from 'avalanche-js-network';\nimport { defaultMessenger, TransactionBase, TxStatus } from 'avalanche-js-transaction';\nimport { numberToHex, Unit } from 'avalanche-js-utils';\nimport { TextEncoder } from 'text-encoding';\n\n/** @hidden */\nexport class StakingSettings {\n  public static PRECISION = 18;\n  public static MAX_DECIMAL = 1000000000000000000;\n}\n\n/** @hidden */\nexport enum Directive {\n  DirectiveCreateValidator,\n  DirectiveEditValidator,\n  DirectiveDelegate,\n  DirectiveUndelegate,\n  DirectiveCollectRewards,\n}\n\nexport class StakingTransaction extends TransactionBase {\n  private directive: Directive;\n  private stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards;\n  private nonce: number | string;\n  private gasLimit: number | string;\n  private gasPrice: number | string;\n  private chainId: number;\n  private rawTransaction: string;\n  private unsignedRawTransaction: string;\n  private signature: Signature;\n  private from: string;\n\n  constructor(\n    directive: Directive,\n    stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards,\n    nonce: number | string,\n    gasPrice: number | string,\n    gasLimit: number | string,\n    chainID: number,\n    messenger: Messenger = defaultMessenger,\n    txStatus = TxStatus.INTIALIZED,\n  ) {\n    super(messenger, txStatus);\n\n    this.directive = directive;\n    this.stakeMsg = stakeMsg;\n    this.nonce = nonce;\n    this.gasLimit = gasLimit;\n    this.gasPrice = gasPrice;\n    this.rawTransaction = '0x';\n    this.unsignedRawTransaction = '0x';\n    this.signature = {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    };\n    this.chainId = chainID;\n    this.from = '0x';\n  }\n\n  encode(): [string, any[]] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    // TODO: temporary hack for converting 0x00 to 0x\n    if (!this.directive) {\n      raw.push('0x');\n    } else {\n      raw.push(hexlify(this.directive));\n    }\n    raw.push(this.stakeMsg.encode());\n    if (!this.nonce) {\n      raw.push('0x');\n    } else {\n      raw.push(hexlify(this.nonce));\n    }\n    raw.push(hexlify(this.gasPrice));\n    raw.push(hexlify(this.gasLimit));\n    if (this.chainId != null && this.chainId !== 0) {\n      raw.push(hexlify(this.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n    return [encode(raw), raw];\n  }\n\n  rlpSign(prv: string): [Signature, string] {\n    const [unsignedRawTransaction, raw] = this.encode();\n    this.setUnsigned(unsignedRawTransaction);\n    const signature = sign(keccak256(unsignedRawTransaction), prv);\n    const signed = this.getRLPSigned(raw, signature);\n    return [signature, signed];\n  }\n\n  getRLPSigned(raw: any[], signature: Signature): string {\n    const sig = splitSignature(signature);\n    let v = 27 + (sig.recoveryParam || 0);\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += this.chainId * 2 + 8;\n\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r) || []));\n    raw.push(stripZeros(arrayify(sig.s) || []));\n\n    return encode(raw);\n  }\n\n  public async sendTransaction(): Promise<[StakingTransaction, string]> {\n    if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n      throw new Error('Transaction not signed');\n    }\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n\n    const res = await this.messenger.send(\n      RPCMethod.SendRawStakingTransaction,\n      this.rawTransaction,\n      this.messenger.chainType,\n      this.messenger.currentShard,\n      // 0, // Staking tx always sent to shard 0\n    );\n\n    if (res.isResult()) {\n      this.id = res.result;\n      this.emitTransactionHash(this.id);\n      this.setTxStatus(TxStatus.PENDING);\n      return [this, res.result];\n    } else if (res.isError()) {\n      this.emitConfirm(`transaction failed:${res.error.message}`);\n      this.setTxStatus(TxStatus.REJECTED);\n      return [this, `transaction failed:${res.error.message}`];\n    } else {\n      this.emitError('transaction failed');\n      throw new Error('transaction failed');\n    }\n  }\n\n  setUnsigned(unSigned: string) {\n    this.unsignedRawTransaction = unSigned;\n  }\n  setRawTransaction(rawTransaction: string) {\n    this.rawTransaction = rawTransaction;\n  }\n  setSignature(signature: Signature) {\n    this.signature = {\n      r: signature.r,\n      s: signature.s,\n      v: signature.v,\n      recoveryParam: signature.recoveryParam,\n    };\n  }\n  setNonce(nonce: number) {\n    this.nonce = nonce;\n  }\n  setFromAddress(address: string) {\n    this.from = address;\n  }\n  getUnsignedRawTransaction() {\n    return this.unsignedRawTransaction;\n  }\n  getRawTransaction() {\n    return this.rawTransaction;\n  }\n  getSignature() {\n    return this.signature;\n  }\n\n  getFromAddress() {\n    return this.from;\n  }\n  async confirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    shardID: number | string = this.messenger.currentShard,\n    toShardID: number | string = 0,\n  ) {\n    const txConfirmed = await this.txConfirm(txHash, maxAttempts, interval, shardID);\n    if (shardID === toShardID) {\n      return txConfirmed;\n    }\n    if (txConfirmed.isConfirmed()) {\n      const cxConfirmed = await this.cxConfirm(txHash, maxAttempts, interval, toShardID);\n      return cxConfirmed;\n    } else {\n      return txConfirmed;\n    }\n  }\n}\n\n/** @hidden */\nexport class Description {\n  name: string;\n  identity: string;\n  website: string;\n  securityContact: string;\n  details: string;\n\n  constructor(\n    name: string,\n    identity: string,\n    website: string,\n    securityContact: string,\n    details: string,\n  ) {\n    this.name = name;\n    this.identity = identity;\n    this.website = website;\n    this.securityContact = securityContact;\n    this.details = details;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    const enc = new TextEncoder();\n    raw.push(enc.encode(this.name));\n    raw.push(enc.encode(this.identity));\n    raw.push(enc.encode(this.website));\n    raw.push(enc.encode(this.securityContact));\n    raw.push(enc.encode(this.details));\n    return raw;\n  }\n}\n\n/** @hidden */\nexport class Decimal {\n  value: BN;\n\n  constructor(value: string) {\n    if (value.length === 0) {\n      throw new Error(`decimal string is empty`);\n    }\n    let value1 = value;\n    if (value[0] === '-') {\n      throw new Error(`decimal fraction should be be between [0, 1]`);\n    }\n    if (value[0] === '+') {\n      value1 = value.substr(1);\n    }\n    if (value1.length === 0) {\n      throw new Error(`decimal string is empty`);\n    }\n    const spaced = value1.split(' ');\n    if (spaced.length > 1) {\n      throw new Error(`bad decimal string`);\n    }\n    const splitted = value1.split('.');\n    let len = 0;\n    let combinedStr = splitted[0];\n    if (splitted.length === 2) {\n      len = splitted[1].length;\n      if (len === 0 || combinedStr.length === 0) {\n        throw new Error(`bad decimal length`);\n      }\n      if (splitted[1][0] === '-') {\n        throw new Error(`bad decimal string`);\n      }\n      combinedStr += splitted[1];\n    } else if (splitted.length > 2) {\n      throw new Error(`too many periods to be a decimal string`);\n    }\n    if (len > StakingSettings.PRECISION) {\n      throw new Error(\n        `too much precision: precision should be less than ${StakingSettings.PRECISION}`,\n      );\n    }\n    const zerosToAdd = StakingSettings.PRECISION - len;\n    combinedStr += '0'.repeat(zerosToAdd);\n    combinedStr = combinedStr.replace(/^0+/, '');\n    const val = new Unit(combinedStr).asWei().toWei();\n    if (val.gt(new Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {\n      throw new Error(`too large decimal fraction`);\n    }\n    this.value = val;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(numberToHex(this.value));\n    return raw;\n  }\n}\n\n/** @hidden */\nexport class CommissionRate {\n  rate: Decimal;\n  maxRate: Decimal;\n  maxChangeRate: Decimal;\n  constructor(rate: Decimal, maxRate: Decimal, maxChangeRate: Decimal) {\n    this.rate = rate;\n    this.maxRate = maxRate;\n    this.maxChangeRate = maxChangeRate;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(this.rate.encode());\n    raw.push(this.maxRate.encode());\n    raw.push(this.maxChangeRate.encode());\n    return raw;\n  }\n}\n\nexport class CreateValidator {\n  validatorAddress: string;\n  description: Description;\n  commissionRates: CommissionRate;\n  minSelfDelegation: number;\n  maxTotalDelegation: number;\n  slotPubKeys: string[];\n  amount: number;\n  constructor(\n    validatorAddress: string,\n    description: Description,\n    commissionRates: CommissionRate,\n    minSelfDelegation: number,\n    maxTotalDelegation: number,\n    slotPubKeys: string[],\n    amount: number,\n  ) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRates = commissionRates;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotPubKeys = slotPubKeys;\n    this.amount = amount;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRates.encode());\n    raw.push(hexlify(this.minSelfDelegation));\n    raw.push(hexlify(this.maxTotalDelegation));\n    raw.push(this.encodeArr());\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n\n  encodeArr(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    this.slotPubKeys.forEach((pubKey) => {\n      raw.push(pubKey);\n    });\n    return raw;\n  }\n}\n\nexport class EditValidator {\n  validatorAddress: string;\n  description: Description;\n  commissionRate: Decimal;\n  minSelfDelegation: number;\n  maxTotalDelegation: number;\n  slotKeyToRemove: string;\n  slotKeyToAdd: string;\n  constructor(\n    validatorAddress: string,\n    description: Description,\n    commissionRate: Decimal,\n    minSelfDelegation: number,\n    maxTotalDelegation: number,\n    slotKeyToRemove: string,\n    slotKeyToAdd: string,\n  ) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRate = commissionRate;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotKeyToRemove = slotKeyToRemove;\n    this.slotKeyToAdd = slotKeyToAdd;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRate.encode());\n    raw.push(hexlify(this.minSelfDelegation));\n    raw.push(hexlify(this.maxTotalDelegation));\n    raw.push(this.slotKeyToRemove);\n    raw.push(this.slotKeyToAdd);\n    return raw;\n  }\n}\n\nexport class Delegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount: number;\n  constructor(delegatorAddress: string, validatorAddress: string, amount: number) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n}\n\nexport class Undelegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount: number;\n  constructor(delegatorAddress: string, validatorAddress: string, amount: number) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n}\n\nexport class CollectRewards {\n  delegatorAddress: string;\n  constructor(delegatorAddress: string) {\n    this.delegatorAddress = delegatorAddress;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    return raw;\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-staking\n */\n\nimport { Messenger } from 'avalanche-js-network';\nimport { Signature } from 'avalanche-js-crypto';\n\nimport {\n  Directive,\n  CreateValidator,\n  EditValidator,\n  Delegate,\n  Undelegate,\n  CollectRewards,\n  Description,\n  CommissionRate,\n  Decimal,\n  StakingTransaction,\n} from './stakingTransaction';\nimport { Unit } from 'avalanche-js-utils';\nimport { TxStatus } from 'avalanche-js-transaction';\n\n/** @hidden */\nexport interface DescriptionInterface {\n  name: string;\n  identity: string;\n  website: string;\n  securityContact: string;\n  details: string;\n}\n\n/** @hidden */\nexport interface CommissionRateInterface {\n  rate: string;\n  maxRate: string;\n  maxChangeRate: string;\n}\n\nexport class StakingFactory {\n  public messenger: Messenger;\n  public stakeMsg?: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards;\n  public directive?: Directive;\n  public nonce: number | string;\n  public gasPrice: number | string;\n  public gasLimit: number | string;\n  public chainId: number;\n  public signature: Signature;\n  constructor(messenger: Messenger) {\n    this.messenger = messenger;\n    this.nonce = 0;\n    this.gasPrice = new Unit('100').asGwei().toHex();\n    this.gasLimit = new Unit('210000').asWei().toHex();\n    this.chainId = 1;\n    this.signature = {\n      v: 0,\n      r: '',\n      s: '',\n    };\n  }\n\n  createValidator({\n    validatorAddress,\n    description,\n    commissionRate,\n    minSelfDelegation,\n    maxTotalDelegation,\n    slotPubKeys,\n    amount,\n  }: {\n    validatorAddress: string;\n    description: DescriptionInterface;\n    commissionRate: CommissionRateInterface;\n    minSelfDelegation: number;\n    maxTotalDelegation: number;\n    slotPubKeys: string[];\n    amount: number;\n  }) {\n    this.stakeMsg = new CreateValidator(\n      validatorAddress,\n      new Description(\n        description.name,\n        description.identity,\n        description.website,\n        description.securityContact,\n        description.details,\n      ),\n      new CommissionRate(\n        new Decimal(commissionRate.rate),\n        new Decimal(commissionRate.maxRate),\n        new Decimal(commissionRate.maxChangeRate),\n      ),\n      minSelfDelegation,\n      maxTotalDelegation,\n      slotPubKeys,\n      amount,\n    );\n    this.directive = Directive.DirectiveCreateValidator;\n    return this;\n  }\n\n  editValidator({\n    validatorAddress,\n    description,\n    commissionRate,\n    minSelfDelegation,\n    maxTotalDelegation,\n    slotKeyToRemove,\n    slotKeyToAdd,\n  }: {\n    validatorAddress: string;\n    description: DescriptionInterface;\n    commissionRate: string;\n    minSelfDelegation: number;\n    maxTotalDelegation: number;\n    slotKeyToRemove: string;\n    slotKeyToAdd: string;\n  }) {\n    this.stakeMsg = new EditValidator(\n      validatorAddress,\n      new Description(\n        description.name,\n        description.identity,\n        description.website,\n        description.securityContact,\n        description.details,\n      ),\n      new Decimal(commissionRate),\n      minSelfDelegation,\n      maxTotalDelegation,\n      slotKeyToRemove,\n      slotKeyToAdd,\n    );\n    this.directive = Directive.DirectiveEditValidator;\n    return this;\n  }\n\n  delegate({\n    delegatorAddress,\n    validatorAddress,\n    amount,\n  }: {\n    delegatorAddress: string;\n    validatorAddress: string;\n    amount: number;\n  }) {\n    this.stakeMsg = new Delegate(delegatorAddress, validatorAddress, amount);\n    this.directive = Directive.DirectiveDelegate;\n    return this;\n  }\n\n  undelegate({\n    delegatorAddress,\n    validatorAddress,\n    amount,\n  }: {\n    delegatorAddress: string;\n    validatorAddress: string;\n    amount: number;\n  }) {\n    this.stakeMsg = new Undelegate(delegatorAddress, validatorAddress, amount);\n    this.directive = Directive.DirectiveUndelegate;\n    return this;\n  }\n\n  collectRewards({ delegatorAddress }: { delegatorAddress: string }) {\n    this.stakeMsg = new CollectRewards(delegatorAddress);\n    this.directive = Directive.DirectiveCollectRewards;\n    return this;\n  }\n\n  setTxParams({\n    nonce,\n    gasPrice,\n    gasLimit,\n    chainId,\n    signature,\n  }: {\n    nonce: number | string;\n    gasPrice: number | string;\n    gasLimit: number | string;\n    chainId: number;\n    signature: Signature;\n  }) {\n    this.nonce = nonce;\n    this.gasPrice = gasPrice;\n    this.gasLimit = gasLimit;\n    this.chainId = chainId;\n    this.signature = signature;\n    return this;\n  }\n\n  build() {\n    if (this.directive === undefined) {\n      throw new Error('cannot build stakingTransaction without Directive');\n    }\n    if (this.stakeMsg === undefined) {\n      throw new Error('cannot build stakingTransaction without stakeMsg');\n    }\n\n    return new StakingTransaction(\n      this.directive,\n      this.stakeMsg,\n      this.nonce !== undefined ? this.nonce : 0,\n      this.gasPrice !== undefined ? this.gasPrice : new Unit('100').asGwei().toHex(),\n      this.gasLimit !== undefined ? this.gasLimit : new Unit('210000').asWei().toHex(),\n      this.chainId !== undefined ? this.chainId : 1,\n      this.messenger,\n      TxStatus.INTIALIZED,\n    );\n  }\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n}\n"],"names":["StakingSettings","Directive","StakingTransaction","directive","stakeMsg","nonce","gasPrice","gasLimit","chainID","messenger","txStatus","defaultMessenger","TxStatus","INTIALIZED","rawTransaction","unsignedRawTransaction","signature","r","s","recoveryParam","v","chainId","from","encode","raw","push","hexlify","rlpSign","prv","setUnsigned","sign","keccak256","signed","getRLPSigned","sig","splitSignature","pop","stripZeros","arrayify","sendTransaction","undefined","Error","send","RPCMethod","SendRawStakingTransaction","chainType","currentShard","res","isResult","id","result","emitTransactionHash","setTxStatus","PENDING","isError","emitConfirm","error","message","REJECTED","emitError","unSigned","setRawTransaction","setSignature","setNonce","setFromAddress","address","getUnsignedRawTransaction","getRawTransaction","getSignature","getFromAddress","confirm","txHash","maxAttempts","interval","shardID","toShardID","txConfirm","txConfirmed","isConfirmed","cxConfirm","cxConfirmed","TransactionBase","Description","name","identity","website","securityContact","details","enc","TextEncoder","Decimal","value","length","value1","substr","spaced","split","splitted","len","combinedStr","PRECISION","zerosToAdd","repeat","replace","val","Unit","asWei","toWei","gt","MAX_DECIMAL","toString","numberToHex","CommissionRate","rate","maxRate","maxChangeRate","CreateValidator","validatorAddress","description","commissionRates","minSelfDelegation","maxTotalDelegation","slotPubKeys","amount","normalizeAddress","encodeArr","forEach","pubKey","EditValidator","commissionRate","slotKeyToRemove","slotKeyToAdd","Delegate","delegatorAddress","Undelegate","CollectRewards","StakingFactory","asGwei","toHex","createValidator","DirectiveCreateValidator","editValidator","DirectiveEditValidator","delegate","DirectiveDelegate","undelegate","DirectiveUndelegate","collectRewards","DirectiveCollectRewards","setTxParams","build","setMessenger"],"mappings":"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"}